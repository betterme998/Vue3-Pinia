# 1.computed计算属性使用
当发现data数据要经过某些变换后使用，统一放到computed计算属性中

  1.复杂data的处理方式
    我们知道，在模板中可以直接通过插值语法显示一些data中的数据
    但是在某些情况，我们可能需要对数据进行一些转换后在显示，或者将多个数据结合到一起进行显示
      .比如需要将多个data数据进行运算，三元运算符来决定结果，数据进行某种转化后显示；
      .在模板中使用表达式，可以非常方便的实现，但是设计他们的初衷是用于简单的运算
      .在模板中放入太多的逻辑会让模板过重和难以维护
      .并且如果用的地方多了，就会有大量重复的代码；
    
    我们有没有什么办法可以将逻辑抽离出去呢？
      .可以，其中一直方法就是将逻辑抽取到一个method中，放到methods的options中；
      .但是，这种做法有一个直观的弊端，就是所有的data使用过程都会变成一个方法的调用；
      .另外一种方式就是使用计算属性computed；
  
  2.认识计算属性computed
    什么是计算属性？
      对于任何包含响应式数据的复杂逻辑，你都可以使用计算属性；
      计算属性将被混入到组件实例中
        所有getter和setter的this上下文自动绑定为组件实例（计算属性可以通过this访问到data数据）

# 2.computed和method区别
  *计算属性和methods的实现看起来差别不大，最大的区别是计算属性的缓存
  *同一个计算多次，计算属性和methods的差异
    计算属性的缓存
    计算属性会基于他们的依赖关系进行缓存
    在数据不发生变化时，计算属性是不需要重新计算的
    但如果依赖的数据发生改变，在使用时，计算属性依然会重新进行计算

# 3.computed的set和get


# 4.侦听器watch选项使用
  *认识侦听器watch
    .什么是侦听器？
    开发中我们在data返回的对象中定义了数据，这个数据通过插值语法等方式绑定到template中
    当数据变化时。template会自动更新来显示最新的数据
    但是在某些情况下，我们希望在代码逻辑中监听某个数据的变化，这个时候就需要用侦听器watch来完成
  举个例子：
    .比如现在我们希望在input中输入一个问题
    每当用户输入了最新的内容，我们就获取到最新的内容，并且使用该问题去服务器查询答案
    那么，我们就需要实时去获取最新的数据变化

  *侦听器watch的配置选项
    要配置watch时，就用完整的写法
    deep:true,//deep(深度) 对象属性改变也会被侦听
    immediate: true, //immediate(立刻，马上) 一渲染就监听。

# 5.侦听器watch其他写法
  1.b:"someMethods" //侦听b，会去methods中找这个方法

  //侦听f，多个侦听方法，会去methods中找handlel方法
  2.f:[
      "handlel",//一
      function handle2(val,oldavl){},//二
      {//三
        handler: function handle3(val,oldavl){}
      }
  ]

# 6.阶段性综合练习
  *书籍购物车
