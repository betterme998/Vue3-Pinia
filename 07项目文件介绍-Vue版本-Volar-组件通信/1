# 1.jsconfig.js的演示
  在02_product_demo文件当中修改webpack路径配置后不会有提示，需要修改jsconfig.js具体在02_product_demo/utils/index

# 2.引入的vue的版本
  主要解释在main 和 App.vue文件
  默认vue版本（就是import { createApp } from 'vue'）：runtime， vue-loader完成template的编译过程 （仅限于.vue文件）
  另一个版本：（import { createApp } from "vue/dist/vue.esm-bundler.js"）：runtime + compile，对template进行编译 （就是源码）

  webpack打包入口文件-》main.js在main.js里面会有一个createApp（App）需要根组件，所以要开发根组件-》创建App.vue组件，然后
  根组件里面也可以用组件，每个组件都有自己的逻辑，样式
#  3.补充：单文件Vue style是有自己的作用域
  给style加上 scoped

#  4.补充：vite创建一个Vue项目
  创建项目方式：Vue Cli：vue create  （基于webpack创建的）  （02_product_demo）
               npm init vue@latest：  （基于vite创建的）
                1.安装一个本地工具：create vue
                2.使用create-vue创建一个vue项目

#  02_product_demo项目utils文件夹，main.js等注意内容

# 5.组件通信 
  04_learn_Component
  最终开发出来的东西最终会形成一个组件树，很多情况需要a组件传递一些数据到b组件，b组件发生的事件需要传递到a组件（这就涉及到组件通信）
  1.Vue组件的嵌套关系
    .前面我们是将所有的逻辑放到一个App.vue中：
    .如果我们一个应用程序将所有逻辑都放在一个组件中，那么这个组件就会变成非常的臃肿和难以维护
    .所以组件化的核心思想应该是对组件进行拆分，拆分成一个个小的组件
    .再将这些组件嵌套在一起，最终形成我们的应用程序；

    当我们对组件进行拆分之后，这时数据还在根组件我们需要将数据传入其他组件

  2.父组件传递子组件
    在开发过程中，我们会经常遇到需要组件之间相互通信；
      可能是子组件发生了事件，需要父组件来完成某些操作，那就需要子组件向父组件传递事件
      要么就是父组件传递数据给子组件等等。。。。

    2.1父子组件之间通信的方式
      1.父组件传递子组件：通过props属性
      2.子组件传递父组件：通过$emit触发事件
    
    2.2在开发中常见的父子组件之间通信，比如父组件有一些数据，需要子组件来进行展示：
      这个时候我们可以通过props来完成组件之间的通信

    2.3什么是Props呢？
      .Props是你可以在组件上注册一些自定义的attrbute
      .父组件给这些attribute赋值，子组件听过attribute的名称获取到对应的值
      attribute：是HTML标签上的某个属性，如id、class、value等以及自定义属性，它的值只能是字符串，关于这个属性一共有三个相关的方法，setAttribute、getAttribute、removeAttribute； 
    2.4.Props的数组用法
          存在一个弊端：1.不能对类型进行验证,2.没有默认值
      .Props的对象用法
          使用对象语法可对传入的内容进行限制
          1.类型
          2.是否必传
          3.默认值
          
          细节一：type的类型都可以是那些
            String
            Number
            Boolean
            Array
            Object
            Date
            Function
            Symbol
          细节二：对象类型的其他写法
            当默认值是一个对象是，必须吧default写成一个函数
            数组类型 default也得写成函数

          细节三：prop的大小写命名
            .html中attribute名是大小写不敏感的，会把大写变小写
            .这意味着使用DOM模板时，（驼峰命名法）的prop名需要使用等价的bebab-case（短横线分隔符命名法）

  3.非props的attribute （ attribute：是HTML标签上的某个属性，如id、class、value等以及自定义属性，它的值只能是字符串，关于这个属性一共有三个相关的方法，setAttribute、getAttribute、removeAttribute； ）
    .当我们传递给一个组件某个属性，但是该属性并没有定义对应的props或者emits时，就被称之为非Prop的Attribute；
    .常见的包括class,style,id等属性；
  .attribute继承
      当组件有单个根节点时，非Prop的Attribute将自动添加到根节点的Attribute中 
  
  如果不希望组件根元素继承attribute，可以在组件中设置inheritAttrs:false
    .禁用attribute继承的常见情况是需要将attribute应用于根元素之外的其他元素
    .我们可以通过$attrs来访问所有的非props的attribute


  4.子组件传递父组件
    一般情况下子组件传递给父组件，都是因为在子组件触发了事件，父组件需要做出响应
    什么情况需要传递内容到父组件？
    .当子组件有一些事件发生的时候，比如在组件中发生了点击，父组件需要切换内容
    .子组件有一些内容想要传递给父组件的时候

    我们如果完成上面的操作呢？
      1.首先，我们需要子组件中定义好在某些情况下触发的事件名称；
      2.其次，在父组件中以v-on的方式传入要监听的事件名称，并绑定到对应的方法中；
      3.最后，在子组件中发生某个事件的时候，根据事件名称触发对应的事件

  5.自定义事件的参数和验证(了解)
    vue3通过emits对参数进行验证。在03_组件通信-子传父 AddCounter.vue中

  6.组件通信案例练习

  # Vue 组件化-插槽Slot/非父子通信
  04_learn_Component/05组件插槽-
  1.认识插槽Slot作用
    1.1.在开发中，我们会经常封装一个个不可复用的组件
      .前面我们会通过props传递给组件一些数据，让组件来进行展示
      .但是为了让这个组件具备更强的通用性，我们不能将组件的内容限定为固定的div，span等等这些元素
      .比如某种情况下我们使用组件，希望组件显示的是一个按钮，某种情况下我们使用组件希望显示一种图片
      .我们应该让使用者可以决定某一块区域到底存放什么内容和元素
    1.2举例：假如我能定制一个通用的导航组件-NavBar
      .这个组件分三个区域：左边-中间-右边，每块区域内容都不是固定的；
      .左边区域可能是菜单图标，也可能是返回按钮，其他同理
      这就可以使用插槽

  2.插槽Slot基本使用
    定义插槽
      1.插槽的使用过程其实就是抽取共性。预留不同
      2.我们会将共同的元素，内容依然在组件内进行封装；
      3.同时会将不同的元素使用slot作为占位符，让外部决定到底显示什么样的元素
    
    如何使用插槽slot
      1.Vue中将<slot>元素作为承载分发内容的出口
      2.在封装组件中，使用特殊的元素<slot>就可以封装组件开启一个插槽
      3.该插槽插入什么取决于父组件如何使用；

    插槽的默认内容
      有时候我们希望在使用插槽时，如果没有插入对应的内容，那么我们需要显示一个默认的内容
      .当然这个默认的内容只会在没有提供插入的内容时，才会显示

  3.具名插槽Slot使用
    事实上，我们希望达到的效果是插槽对应的显示，这个时候我们就可以使用 具名插槽
      .具名插槽顾名思义就是给插槽起一个名字，<slot>元素有一个特殊的attribute：name
      .一个不带name的slot，会带有隐含的名字default

    动态插槽名
    06具名插槽app.vue中有
    什么是动态插槽
      .目前我们使用的插槽名称都是固定的；
      .比如v-slot:left。等
      .我们可以通过v-slot:[dynamicSlotName]方式动态绑定一个名称；

    具名插槽使用的时候缩写
      .跟v-on和v-bind一样，v-slot也有缩写；
      .即把参数之前的所有内容（v-slot:）替换为字符#；

    渲染作用域
    在Vue中有渲染作用域的概念
      .父级模板里的所有内容都是在父级作用域中编译的
      .子模板里面的所有内容都是在子作用域中编译的
    
    独占默认插槽的缩写
      如果我们的插槽默认插槽default，那么在使用的时候v-slot:default="slotProps" 可以简写为v-slot="slotProps"

      如果我们的插槽只是默认插槽时，组件的标签可以被当做插槽的模板来使用，这样我们就可以将v-slot直接用在组件↑

    默认插槽和具名插槽混合
      但是，如果我们有默认插槽和具名插槽，那么按照完整的template来编写
      只要出现多个插槽，请始终为所有的插槽使用完整的基于<template>的语法

  回顾：
    一。补充
      1.1jsconfig的作用

      1.2vue不同版本的作用
      .runtime 运行时
      .runtime+comiple 运行时+编译

      1.3css的scoped作用域

      1.4你配吗init vue@/latest创建项目
      .vite打包

    二、组件间的通信
    2.1.组件的嵌套关系
      .父组件/子组件
    2.2.父传子 
    2.3非props的attribute
    2.4子传父-$emit (重要)
    2.5.阶段案例练习-TabControl的封装

    三.组件的插槽Slot
    3.1.认识slot的作用
    3.2slot的基本使用和默认值(重要)
    3.3slot的具名插槽(重要)
    3.4动态插槽名
    3.5编译作用域
    3.6作用域插槽使用 
      .核心：将子组件的数据传递给父组件的插槽来使用


  4.作用域插槽Slot使用


  5.全局事件总线使用

  6.依赖注册Provide/Inject