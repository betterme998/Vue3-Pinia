1.Vue全家桶
  1.Vue核心语法
  2.插件 Vue-Router (前端页面切换的)
  3.插件 Vuex/Pinia (状态管理)  现在推荐使用Pinia

  1.Vue-Router
    1.前端路由的发展历程
      1.1.认识前端路由
        .路由其实是网络工程中的一个术语：
          .在架构一个网络时，非常重要的两个设备就是路由器和交换机。
          .当然，目前在我们生活中路由器也是越来越被大家熟知，因为我们生活中都会用到路由器；
          .事实上，路由器主要维护的是一个映射表；
          .映射表会决定数据的流向
        
        .路由的概念在软件工程中出现，最早是在后端路由中实现，原因是web的发展主要经历了这样一些阶段：
          后端路由阶段
          前后端分离阶段
          单页面富应用（SPA）
            1.后端路由阶段
              当我们打开网站的时候，一个网站不止有一个网页，一个网站由多个网页组成的，
              用户打开的可能是任意的页面，以前是这样做的，打开一个网页，先将url传入到服务器里面，服务器渲染好对应的网页，再返回回去。
              一个url对应一个网页，他们之间的映射关系由后端进行维护的。

              .早期的网站开发整个Html页面是由服务器渲染的
                .服务器直接生产渲染好对应的HTML页面，返回给客户端进行展示
              .但是，一个网站，这么多页面服务器如何处理呢？
                .一个页面有自己对应的网址，也就是url；
                .URL会发送到服务器，服务器会通过正则对该URL进行匹配，并且最后交给一个Controller进行处理；
                .Controller进行各种处理，最终生成HTML或者数据，返回给前端
              .上面的这种操作，就是后端路由
                .当我们页面中请求不同的路径内容时，交给服务器来进行处理，服务器渲染好整个页面，并且将页面返回给客户端。
                .这种情况下渲染好的页面，不需要单独加载任何的js和css，可以直接交给浏览器展示，这样也有利于SEO的优化
            
            
            2.前后端分离阶段 
              .前端渲染的理解：
                .每次请求涉及到的静态资源都会从静态资源服务器获取，这些资源包括HTML,CSS,JS，然后在前端对这些请求回来的资源进行渲染；
                .需要注意得是，客户端的每一次请求，都会从静态资源服务器请求文件
                .同时可以看到，和之前的后端路由不同，这时后端只是负责提供API
              .前后端分离阶段
                .随着Ajax的出现，有了前后端分离的开发模式；
                .后端只提供API来返回数据，前端通过Ajax获取数据，并且可以通过JavaScript将数据渲染到页面；
                .这样做最大的有点就是前后端责任清晰，后端专注于数据上，前端专注于交互和可视化上
                .并且当移动端（iOS/Android）出现后，后端不需要进行任何处理，依然使用之前的一套API即可
                .目前比较少的网站采用这种模式开发

            3.单页面富应用（SPA）阶段
              1.点击导航，会切换url地址
              2.让内容渲染不同的组件
              3.在前端维护路由关系，不同url显示不同的组件

              其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由
              也就是前端来维护一套路由规则
            怎么做到改变url页面不进行刷新呢？
            1.URL的hash
              前端路由是如何做到URL和内容进行映射呢？监听URl的改变
              .URL的hash 
                .URL的hash也就是锚点（#）,本质上是改变window.location的href属性；
                .我们可以通过直接赋值location.hash来改变href，但是页面不发生刷新

            2.HTML5的History
              .history接口是HTML5新增的，它有六种模式改变URL而不刷新页面
                .replaceState:替换原来的路径
                .pushState：使用新的路径
                .PopState：路径的回退
                .go：向前或向后改变路径
                .forward：向前改变路径
                .back：向后改变路径



    2.Vue-Router基本使用
      2.1.认识vue-router 
        .目前前端流行的三大框架，都有自己的路由实现：
          .Angular的ngRouter
          .React的ReactRouter
          .Vue的vue-router
        .Vue Router是Vue.js的官方路由：
          .它与Vue.js核心深度集成，让用Vue.js构建单页应用变得非常容易
          .目前Vue路由最新的版本是4.x版本
        
        .vue-router是基于路由和组件的
          .路由用于设定访问路径，将路径和组件映射起来
          .在vue-router的单页面应用中，页面的路径的改变就是组件的切换；

        1.第一步：创建路由需要映射的组件（打算显示的页面）
        2.第二步：通过createRouter创建路由对象，并且传入routes和history模式；
          .配置路由映射：组件和路径映射关系的routers数组；
          .创建基于hash或者history的模式
        3.第三步：使用app注册路由对象（use方法）
        4.第四步：路由使用：通过<router-link>和<router-view>

    3.路由懒加载分包处理

    4.动态路由和路由嵌套

    5.路由的编程式导航

    6.动态管理路由对象

    7.路由导航守卫钩子

    回顾1.2组件化抽取（重要）
        1.3对复杂数据使用computed
        1.4模拟网络请求
        
        二，vue-router 
        2.1前端路由的发展历程
          .后端路由阶段
          .前端路由的发展历程
          .单页面富应用（SPA）
        2.2改变url页面不刷新的两种模式
          .hash模式
          .history模式 
        2.3vue-Router基本使用
          .安装
            .npm install vue-router
          .使用
            .创建router对象
              .createRouter
              .routes映射关系
              .history:createWebHashHistory()
            .app.use(router)
            .使用路径
              router-view：占位
              router-link
                .编程式导航
        
        2.4vue-router知识点补充
          2.4.默认路径
          .path -> redirect
            2.4.2.history模式 
              .createWebHistory()
            2.4.3.routet-link其他属性
            .to
            .replace 
            .active-class
            .exact-active-class
            2.4.4.路由懒加载，分包处理
            2.4.5.其他属性
            .name
            .meta
              .router.meta
          2.5 动态路由使用
            .path:/user/:id
          2.6NoFound页面匹配
            .path:/pathMatch(.*)
            .path:/pathMatch(.*)*
          
          2.7 路由的嵌套使用
            .1.在一层路由中添加children属性
            .2在Home组件中添加<router-view>
            .3路径跳转<router-link>
          2.8.编程式导航
          2.8.1.跳转方法
            .push(路径)
            .push({path/query})
            .replace()

          2.8.2.路径切换
            .back()
            .forWard()
            .go(number)

作业：
  一.理解代码抽取，封装思想

  二.什么是前端路由？前端路由的发展历程是这样的

  三.前端路由切换的本质是什么？ hash和history有什么区别？

  四。路由的使用步骤是什么？总结整理

  五.如何给路由跳转的组件传递数据

  六。如何实现路由的嵌套？

  七。如何动态的添加路由对象，这样做的意义是什么？

  八.什么是路由守卫？路由守卫有什么作用？


动态添加路由
  后台管理系统
  角色: 客服/运营/产品/超级管理员

  两种方案：
  1.根据不同的角色，生成不同的菜单
    .对应的菜单的路由还是有注册的
      .输入路径还是能跳转到对应的组件
      .这种方案不完善
  
  2.根据不同的角色，生成不同的菜单
  .路由也是动态注册的

  先登录，根据不同角色动态注册路由，根据判断逻辑决定要不要吧路由加进去

  后台管理系统就是使用动态添加路由

  我们登录的角色，发现他有对应的权限，我们就将对应的角色注册进来。这就能使用动态添加路由

  