1.Vue在前端重要性
    #认识vue
        .Vue是一套用于 “构建用户界面” 的 “渐进式Javascript框架”
        .它基于标准HTML，CSS,和JavaScript构建，并提供了一套声明式的，组件化的编程模型
    #什么是渐进式框架？
        .表示我们可以在项目中一点一点来引入和使用Vue，而不一定需要全部使用Vue来开发整个项目。（一般都是用vue开发整个项目）
    #目前Vue在前端处于什么地位？
        目前最流行的三大框架：Vue，React,Angular。
        Angular：入门门槛高，在国内占比低。
        React:React在国内外市场占有率都是非常高的：作为前端工程师也是必须学习的一个框架；
        Vue：Vue在国内市场占有率是最高的，几乎所有前端岗位都会对Vue有要求
2.Vue2和Vue3选择
    直接学习vue3就行了，
    在2020年9月19日，万众期待的Vue3终于发布了正式版，命名为“One Piece”
    .更好的性能
    .更小的包体积
    .更好的TypeSctipt集成
    .更优秀的API设计
3.引入Vue的方式
    #如何使用Vue？
        Vue的本质，就是一个JavaScript的库
            刚开始我们不需要把他想象的非常复杂；
            我们就把它理解成一个已经帮助我们封装好的库
            在项目中可以引入并使用它即可
    #安装和使用Vue这个JavaScript库有哪些方式呢？
        方式一：在页面中通过CDN的方式来引入；
        方式二：下载Vue的JavaScript文件，并且自己动手引入；
        方式三：通过npm包管理工具安装并使用它
        方式四：直接通过Vue CLI创建项目，并且使用它
        
        方式一:CDN引入
            Vue的CDN引入：
                <script src="https://unpkg.com/vue@next"></script>
        方式二：下载和引入
            下载Vue源码，可以直接打开CDN链接复制
                网页打开CDN链接复制其中所有代码
                创建一个新文件，比如Vue.js,将代码复制到其中
        
4.Vue案例初体验
5.命令和声明式编程
    命令式编程关注的“how to do” 自己完成整个how的过程
    声明式编程关注的是‘what to do’,由框架（机器）完成“how”的过程；

    *原生的实现过程中，我们是如何操作的呢？
        .我们每完成一个操作，都需要通过Javascript编写一条代码，来给浏览器一个指令
        .这被称为命令式编程
        早期的原生JavaScript和jQuery开发的过程中，我们都是通过这种命令式的方式在编写
    *在Vue的过程中，我们是如何操作的呢？
        .我们会在createApp传入的对象中声明需要的内容，模板template，数据data，方法methods；
        .这样的编写代码的过程，我们称之为是声明式编程
        .目前Vue，React，Angular，小程序的编程模式，我们称之为声明式编程
5.MVVM模型
    #MVC和MVVM都是一种软件的体系结构
        .MVC是Model-View-Controller的简称，是在前期被使用非常框架的架构模式，比如iOS，前端
        .MVVM是Model-view-ViewModel的简称，是目前非常流行的框架模式

6.Vue的options
    options的data属性
        .data属性传入一个函数，并且该函数需要一个对象：
        .data中返回的对象会被Vue的响应式系统劫持，之后对该对象的修改或者访问都会在劫持中被处理
            *所以我们在template或者app中通过{{counter}}访问counter，可以从对象中获取到数据；
            *所以我们修改counter的值时，app中的{{counter}}也会发生改变

    动态数据方法：
        1.Object.defineProperty(info,"name",{
            set:
            get:
        })
        2.new Proxy(info,{
            set:
            get:
        })