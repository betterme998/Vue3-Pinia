1.1.创建一个vite项目
    .npm init vue@latest

1.Vue中自定义指令
  .在Vue的模板语法中我们学习过各种各样的指令：v-show，v-for，v-model等等，除了使用这些指令之外，Vue也允许我们来自定义自己的指令。
    .注意：在Vue中，代码的复用和抽象主要还是通过组件
    .通常在某些情况下，你需要对DOM元素进行底层操作，这个时候就会用到自定义指令

  .自定义指令分为两种
    .自定义局部指令：组件中通过directives选项，只能在当前组件中使用
    .自定义全局指令：app的directive方法，可以在任意组件中被使用
  
  .比如我们来做一个非常简单的案例：当某个元素挂载完成后可以自定义获取焦点
    .实现方式一：如果我们使用默认的实现方式
    .实现方式二：自定义一个v-focus的局部指令
    .实现方式三：自定义一个v-focus的全局指令
  1.1.指令的生命周期
    一个指令定义的对象，Vue提供了如下的几个钩子函数：
    .created：在绑定元素的attribute或事件监听器被应用之前调用；
    .beforeMount:当指令第一次绑定到元素并且在挂载父组件之前调用；
    .mounted：在绑定元素的父组件被挂载后调用；
    .beforeUpdate:在更新包含组件的VNode之前调用
    .updated：在包含组件的VNode及其子组件的VNode更新后调用；
    .beforeUnmount：在卸载绑定元素的组件之前调用
    .unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次
  
  1.2.指令的参数和修饰符
  


2.Vue内置组件Teleport
  1.认识Teleport
  .在组件化开发中，我们封装一个组件A，在另一个组件B中使用
    .那么组件A中template的元素，会被挂载到组件B中template的某个位置
    .最终我们的应用程序会形成一颗DOM树结构
  .但是某些情况下，我们希望组件不是挂载在这个组件上的，可能是移动到Vue app之外的其他位置
    .比如移动到body元素上，或者我们有其他的div#app之外的元素上；
    .这个时候可以通过teleport来完成；

  .Teleport是什么呢？
    .它是一个Vue提供的内置组件，类似于react的portals；
    teleport翻译过来是心灵传输，远距离传输的意识
      .它有两个属性
        .to：指定将其中的内容移动到的目标元素，可以使用选择器；
        .disabled:是否禁用teleport的功能

3.Vue内置组件Suspense
  1.异步组件和Suspense
  .Suspense是一个内置的全局组件，该组件有两个插槽：
    .default： 如果default可以显示，那么显示default的内容
    .fallback：如果default无法显示，那么显示fallback插槽的内容
  
  用在异步组件中的

4.Vue中安装插件的方式
  1.认识Vue插件
    .通常我们向Vue全局添加一些功能时，会采用插件的模式，它有两种编写方式
      .对象类型：一个对象，但是必须包含一个install函数，该函数会在安装插件是执行
      .函数类型：一个function，这个函数会在安装插件时自动执行
    .插件可以完成的功能没有限制，比如下面的几种都是可以的
      .添加全局方法或者property，通过把它们添加到config.globalProperties上实现
      .添加全局资源：指令/过滤器/过渡等
      .通过全局mixin来添加一些组件选项
      .一个库，提供自己的api，同时提供上面提到的一个或多个功能

5.Vue中渲染函数的使用
  1.认识h函数
    .Vue推荐在绝大数情况下使用模板来创建你的HTML，然后一些特殊的场景，你真的需要javascript的完全编程的能力，这个时候你可以使用渲染函数，它比模板更接近编译器
    本质上template还是会转换成rander函数-》VNode

    .前面我们讲解过VNode和VDOM的概念；
      .Vue在生成真实DOM之前，会想我们的节点转换为VNode，而VNode组合在一起形成一颗树结构，就是虚拟DOM（VDOM）
      .事实上，我们之前编写的template中的HTML，最终也是使用渲染函数生成对应的VNode
      .那么，如果你想充分的利用javascript的编程能力，我们可以自己来编写createVNode函数，生成VNode

    .那么我们应该怎么来做呢？使用h（）函数
    h()函数是一个用于创建vnode的一个函数
    .其实更准确的名称是createVNode()函数，但是为了简便在Vue将之简化为h()函数 

  2.h()函数 如何使用呢？
  h()函数 如何使用呢？它接收三个参数
    .标签名
    .对象 （添加属性）
    .组件

6.Vue中编写jsx的语法
  1.jsx的babel配置
    .如果我们希望在项目中使用jsx，那么我们需要添加jsx的支持
      .jsx我们通常会通过Babel来进行转换（React编写的jsx就是通过babel转换的）；
      .对于Vue来说，我们只需要在Babel中配置对应的插件即可

      template由 vue-loader进行转换的
      render 不需要转化
      jsx  由 babel 

      babel 可将es6 转 es5
                ts 转 js 
                jsx 转 js 
    1.安装Babel支持vue的jsx插件
      npm install @vue/babel-plugin-jsx -D 

      .如果是Vite环境，需要安装插件
      npm install @vitejs/plugin-vue-jsx -D
    2.在babel.config.js配置文件配置插件

回顾
一.详情页补充
  1.1.详情页滚动匹配tabControl
  1.2.详情页的点击bug处理

二.项目细节补充
  2.1.首页滚动（页面滚动）
  2.2.首页的keep-alive
  2.3.记录首页滚动的位置
  2.4.消息页面切换（v-show）
  2.5.移动端适配
  .meta-> viewport
  .px -> vw
    .postcss-to-viewport

  2.6.项目打包和预览
三.高级语法的补充
  3.1.自定义指令
    .全局/局部
    .生命周期函数
    .参数-修饰符-值
    .案例练习
      .人民币符号
      .时间格式化
  3.2.内置组件补充
    .teleport 
    .suspense 
  3.3.插件的安装
    .对象类型 
      .会执行对象的install 函数，传入app
    .函数类型
      传入app

作业：
一.如何自定义指令，自定义指令的两种方式和生命周期

二.Vue中如何安装插件，插件的使用过程是什么？

三.Vue中实现动画的组件有哪些？实现动画的本质是什么

四.多写几遍项目