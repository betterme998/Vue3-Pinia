# 1.Vue的条件渲染
  在某些情况下，我们根据当前的条件决定某些元素或组件是否渲染，这个时候我们就需要进行条件判断了。
  vue提供了下面的指令来进行条件判断
    .v-if
    .v-else
    .v-else-if
    .v-show

  v-if的渲染原理：
    .v-if是惰性的；
    .当条件为false时，其判断的内容完全不会被渲染或者会被销毁掉；
    .当条件为true时，才会真正渲染条件中的内容

# 2.template元素
  因为v-if是一个指令，所以必须将其添加到一个元素上：
    .但是如果我们希望切换的是多个元素呢？
    .此时我们渲染div。但是我们并不希望div这种元素被渲染
    .这个时候，我们可以选择使用template
  template元素可以当做不可见的包裹元素，并且在v-if上使用，但最终template不会被渲染出来；
    .有点类似于小程序的block

  

#v-show
  .v-show和v-if的用法看起来是一致的，也是根据一个条件决定是否显示元素或组件：
  .v-show和v-if区别
    。v-show是不支持template；
    。v-show不可以和v-else一起使用
    。v-show元素无论是否需要显示到浏览器上，它的DOM实际都是有存在的，只是通过Css的display所属性来进行切换
    。v-if当条件为false时，其对应的原生压根不会被渲染到DOM
  开发中如何选择？
    如果我们的原生需要在显示和隐藏之间频繁切换就用v-show；
    如果不需要频繁切换就用v-if

# 3.v-for列表渲染
  .在真实开发中，我们往往会从服务器拿到一组数据，并且需要对其进行渲染
    这个时候我们可以使用v-for来完成
    v-for类似于JavaScript的for循环，可以用于遍历一组数据
  .v-for基本使用
    数组通常来自data或者prop，也可以是其他方式；
    item是我们给每项元素起的一个别名，这个别名可以自己来定义
  .我们知道，在遍历一个数组的时候会经常需要拿到数组的索引；
    .如果我们需要索引，可以使用格式："(item,index) in 数组";
    .注意上面的顺序：数组元素项item是在前面的索引项index是在后面的

# 4.v-for渲染类型
  v-for支持的类型
    .v-for也支持遍历对象，并且支持一二三个参数
      1.:"value in object"
      2.:"(value,key) in object";
      3.:"(value,key,index) in object"

# 5.数组更新的检测

# 6.v-for的key属性
  在使用v-for进行列表渲染时，我们通常会给元素或者组件绑定一个key属性
  这个key属性作用：
    key属性主要在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes
    如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能地尝试就是修改/复用相同类型的算法
    而且使用key时，它会基于key的变化重新排列元素顺序，并且会移除不存在的元素

    什么是新旧nodes，为什么VNode？
    没有key的时候，如何尝试修改和修用的？
    有key的时候，如何基于key重新排列
  
  认识VNode
    我们先来解释一下VNode的概念：
    html元素创建出来的VNode
      VNode的全程是Virtual Node，也就是虚拟节点
      事实上，无论是组件还是元素，他们最终在vue中表现出来的都是一个个VNode(虚拟节点)；

      VNode本质是一个JavaScript对象；

      
# 7.Vue的虚拟DOM
  如果我们不只是一个简单的div，而是有一大堆的元素，那么他们应该会形成一个VNode Tree （树结构）->虚拟DOM

  存在虚拟DOM方便跨平台，
  将模板解析成虚拟DOM后可以转换为真实DOM，渲染到服务器上，也可以转换成移动端的东西，还可以渲染成桌面端一些控件
  还可以渲染成VR设备
  虚拟DOM可用作跨平台


# 8.v-for的diff算法

