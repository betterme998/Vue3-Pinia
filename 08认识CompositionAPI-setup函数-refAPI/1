# 目录
  1.认识CompositionAPI
    Options API的弊端
      .在Vue2中，我们编写组件的方式是Options API ：
        .Options API的一大特点就是在对应的属性中编写对应的功能模块；
        .比如data定义数据，methods中定义方法，computed中定义计算属性，watch中监听属性改变，也包括生命周期钩子
      .但是这种代码有一个很大的弊端
        .当我们实现一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；
        .当我们组件变得更大更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很散；
        .尤其是对于那些一开始没有编写这些组件的人来说，这个组件代码是难以阅读和理解的（阅读组件是其他人）
      大组件的逻辑分散
        .如果我们能将同一个逻辑关注点的代码收集在一起会更好
        .这就是CompositionAPI想要做的事情，以及可以帮助我们完成的事情。
        .也有人把Vue CompositionAPI简称为VCA

    认识CompositionAPI
      那么既然知道Composition API想要帮助我们做什么事情，接下来看一下到底是怎么做呢？
        .为了开始使用Composition API，我们需要有一个可以实际使用它（编写代码），的地方；
        .在Vue组件中，这个位置就是setup函数
    
      setup其实就是组件的另外一个选项：
        .只不过这个选项强大到我们可以用它来代替之前编写所编写
        .比如methods，computed，watch，data，生命周期等等；

      接下来学习使用这个函数
        .函数的参数
        .函数的返回值

        1.setup函数的参数
          我们先来研究一个setup函数的参数，它主要有两个参数：
            第一个参数：props
            第二个参数：context
          props非常好理解，它其实就是父组件传递过来的属性会被放到props对象中，我们在setup中如果需要使用，那么就可以直接通过props参数获取：
            .对于定义props的类型，我们还是和之前的规则是一样的，在Props选项中定义；
            .并且在template中依然是可以正常去使用props中的属性，比如message；
            .如果我们在setup函数中想要使用props，不可以通过this去获取（后面会讲）
            .因为props有直接作为参数传递到setup函数中，所以我们可以直接通过参数来使用即可；
          另一个参数context，我们也称之为是一个SetupContext，它里面包含三个属性：
            1.attrs:使有的非prop的attribute
            2.slots：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）；
            3.emit：当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过this.$emit发出事件）；

        2.setup函数的返回值
          setup既然
    第一部分总结：
      一.Composition API
        1.1.options API -> Composition API
        1.2.组合API实现计数器案例
        
      作业：
        1.如何进行非父子组件的通信

        2.什么是生命周期函数？说说你对它回调的理解

        3.说说你对动态组件和keep-alive的作用理解

        4.对组件使用v-model的本质是什么？

        5.什么是Composition API？ 和之前的options API有什么区别


      

  2.Setup函数的基本使用

  3.Setup中数据的响应式

  4.Reactive知识点补充

  5.Ref知识点补充

  6.setup中禁用this
