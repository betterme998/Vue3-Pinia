一.认识应用状态管理
  1.什么是状态管理
    .在开发中，我们会的应用程序需要处理各种各样的数据，这些数据需要保存在我们应用程序中的某个位置，对于这些数据的管理我们就称之为状态管理
    .在前面我们是如何管理自己的状态呢？
      .在Vue开发中，我们使用组件化的开发方式
      .而在组件中我们定义data或者在setup中返回使用数据，这些数据我们称之为state
      .在模块template中我们可以使用这些数据，模块最终会被渲染成DOM，我们称之为View；
      .在模块中我们会产生一些行为事件，处理这些行为事件，有可能会修改state，这些行为事件我们称之为actions
  2.复杂的状态管理
    .JavaScript开发的应用程序，已经变得越来越复杂了
      .JavaScript需要管理的状态越来越多，越来越复杂；
      .这些状态包括服务器返回的数据，缓存数据，用户操作产生的数据等等
      .也包括一些UI状态，比如某些元素是否被选中，是否显示加载动效，当前分页
  3.Vuex的状态管理
    .管理不断变化的state本身是非常困难的
      .状态之间相互存在依赖，一个状态的变化会引起另一个状态的变化，View页面也可能会引起状态的变化；
      .当应用程序复杂时，state在什么时候，因为什么原因而变化，发生了怎样的变化，会变得非常难以控制和追踪；
    .因此，我们是否可以考虑将组件的内部状态抽离出来，以一个全局单例的方式来管理呢？
      .在这种模式下，我们的组件树构成了一个巨大的“视图View”
      .不管在树的哪里位置，任何组件都能获取状态或者触发行为
      .通过定义和隔离状态管理中的各个概念，并通过强制性的规则来维护试图和状态间的独立性，我们的代码会变得更加结果化和易维护，跟踪
二.Vuex的基本使用
  1.安装vuex  npm install vuex 
三.核心概念State

四.核心概念Getters
  getters的基本使用
  getters相应的computed，当我们希望数据改变之后再传给别人使用时使用getters
五.核心概念Mutations
  Mutation基本使用
  .更改Vuex的store中的状态的唯一方法是提交mutation
六.核心概念Actions
  actions的基本使用
  .Action类似于mutation，不同在于：
    .Action提交的是mutation，而不是直接变更状态；
    .Action可以包含任意异步操作
  .这里有一个非常重要的参数context：
    .context是一个和store实例均有相同方法和属性的context对象；
    .所以我们可以从中获取到commit方法来提交一个mutation，或者通过context.state和 context.getters来获取state和getters
  .但是为什么它不是store对象呢？这个等到讲Modules时具体说
七.核心概念Modules
  module的基本使用
  随着项目越来越大，store体积也会非常庞大
  我们需要拆解state，吧store进行分模块

  八.Pinia状态管理
    1.Pinia和Vuex的对比
      1.1.什么是Pinia呢？
        .Pinia（发音/pi:nj/.如英语中的peenya）
        .Pinia开始于大概2019年，最初是作为一个实验为Vue重新设计状态管理，让它用起来像组合式API（Composition API）。
        .从那时到现在，最初的设计原则依然相同的，并且目前同时兼容vue2，vue3，也并不要求你使用CompositionAPI；
        .Pinia本质上依然是一个状态管理库，用于跨组件，页面进行状态共享（这点和vuex，Redux一样）

      1.2.Pinia和Vuex的区别
      .那么我们不是已经有Vuex了吗？为什么还要用Pinia呢？
      .Pinia最初是为了探索Vuex的下一次迭代会是什么样子，结合了Vuex5核心团队讨论中的许多想法
      .最终，团队意识到Pinia已经实现了Vuex5中大部分内容，所以最终决定用Pinia来替代Vuex
      .于Vuex相比，Pinia提供了一个更简单的API，具有更少的仪式，提供了CompositionAPI风格的API
      .最重要的是，在与TypeScript一起使用时具有可靠的类型推断支持

      .和Vuex相比，Pinia有很多的优势
    .比如mutations不再存在
      *他们经常被认为是非常冗长；
      *他们最初带来了devtools集成。但这不再是问题
    .更友好的TypeScript支持，Vuex之前对TS的支持很不友好；
    。不再有modules的嵌套解构
      。你可以灵活使用每一个store，他们是通过扁平化的方式来相互使用的
    .也不再有命名空间的概念，不需要记住它们的复杂关系
    2.创建Pinia的Store

    3.Pinia核心概念State

    4.Pinia核心概念Getters

    5.Pinia核心概念Actions