1.封装navbar
2.写图片
3.封装定位
  .点击城市跳转到选择城市页面
  .点击定位获取当前位置经纬度
  .创建点击后跳转的页面，并配置路由
4.封装axios，请求选择城市数据
  4.1.安装axios
    .npm install axios
  4.2.在service文件夹中创建requset，modules文件夹,index.js
    .requset文件夹封装了axios，和配置config
    .modules文件存放各个模块的请求，如城市所有的请求都放在city.vue里面
    .index.js用来导入模块中请求方法，在使用时就不要一直往下找，直接导入service的index.js

    当我们需要发送网络请求时，直接去找对应的模块 service->module->xxx 如请求城市，service->module->city,js
    当我们调用city.js里的方法时需要什么参数其实都在module->city,js里面拼接了
    调用成功返回一个promise，在进行操作

    如果有一天服务器地址发送修改，我们只要找知道的模块就行

  4.3.目前请求操作还在当前需要请求页面本身,如果请求数据特别多,如首页,需要发送很多网络请求
      这时就会有大量请求代码.和数据处理逻辑

      这时将网络请求封装抽取到Pinia,每个需要请求的页面,对应着自己的store
      着就形成了层级架构,vue页面只管拿手机,store负责发送网络请求,service文件夹负责封装axios,及网络请求url

  4.3.在选择城市内，我们通过store发送网络请求拿到数据，后使用pinia的storeToRefs让数据变成响应式的，
      .再通过给vant Tab组件组件绑定name（自带的），让我们拿到key，
      .再通过computed当点击标签数据变化重新执行，让数据变成动态数据

  4.4.处理请求数据
    要求：在城市选择页面，点击不同标签，拿到不同的数据
    1.通过封装好的请求函数拿到整体数据
    2.通过Vant组件tab封装:name = key  (name标签名称，作为匹配的标识符 ， key 为遍历数据的键，以数据的键为标签吗来区分点击了那个)
    3.Vant 组件的module:activa = 自己定义的动态数据 绑定了当前匹配的标识符，从而拿到当前点击标签对应数据的键
    4.数据有了，键有了。拿到数据通过computed让它变成响应式数据
    5.在template中使用时获取具体数据时： 数据?.属性 使用?. 代替 . 因为一开始时，数据为undefined，拿不到值会报错

  4.5.城市选择对应标签下展示的数据，抽取到组件，子组件通过definePinia获取数据，再通过for in嵌套处理数据
    .通过Vant UI组件库完成

  4.6.监听城市点击
    .点击城市后返回上一页，因为很多页面可以进入城市选择页面
    .点击时吧选中的数据存放到city的store中，因为很多地方可能用的
  4.7.点击后在对应使用到城市的组件中使用store拿到数据
    .可使用解构赋值和storeToRefs让它变成响应数据
      
