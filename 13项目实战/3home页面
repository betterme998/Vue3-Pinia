1.封装navbar
2.写图片
3.封装定位
  .点击城市跳转到选择城市页面
  .点击定位获取当前位置经纬度
  .创建点击后跳转的页面，并配置路由
4.封装axios，请求选择城市数据
  4.1.安装axios
    .npm install axios
  4.2.在service文件夹中创建requset，modules文件夹,index.js
    .requset文件夹封装了axios，和配置config
    .modules文件存放各个模块的请求，如城市所有的请求都放在city.vue里面
    .index.js用来导入模块中请求方法，在使用时就不要一直往下找，直接导入service的index.js

    当我们需要发送网络请求时，直接去找对应的模块 service->module->xxx 如请求城市，service->module->city,js
    当我们调用city.js里的方法时需要什么参数其实都在module->city,js里面拼接了
    调用成功返回一个promise，在进行操作

    如果有一天服务器地址发送修改，我们只要找知道的模块就行

  4.3.目前请求操作还在当前需要请求页面本身,如果请求数据特别多,如首页,需要发送很多网络请求
      这时就会有大量请求代码.和数据处理逻辑

      这时将网络请求封装抽取到Pinia,每个需要请求的页面,对应着自己的store
      着就形成了层级架构,vue页面只管拿手机,store负责发送网络请求,service文件夹负责封装axios,及网络请求url

  4.3.在选择城市内，我们通过store发送网络请求拿到数据，后使用pinia的storeToRefs让数据变成响应式的，
      .再通过给vant Tab组件组件绑定name（自带的），让我们拿到key，
      .再通过computed当点击标签数据变化重新执行，让数据变成动态数据

  4.4.处理请求数据
    要求：在城市选择页面，点击不同标签，拿到不同的数据
    1.通过封装好的请求函数拿到整体数据
    2.通过Vant组件tab封装:name = key  (name标签名称，作为匹配的标识符 ， key 为遍历数据的键，以数据的键为标签吗来区分点击了那个)
    3.Vant 组件的module:activa = 自己定义的动态数据 绑定了当前匹配的标识符，从而拿到当前点击标签对应数据的键
    4.数据有了，键有了。拿到数据通过computed让它变成响应式数据
    5.在template中使用时获取具体数据时： 数据?.属性 使用?. 代替 . 因为一开始时，数据为undefined，拿不到值会报错

  4.5.城市选择对应标签下展示的数据，抽取到组件，子组件通过definePinia获取数据，再通过for in嵌套处理数据
    .通过Vant UI组件库完成

  4.6.监听城市点击
    .点击城市后返回上一页，因为很多页面可以进入城市选择页面
    .点击时吧选中的数据存放到city的store中，因为很多地方可能用的
  4.7.点击后在对应使用到城市的组件中使用store拿到数据
    .可使用解构赋值和storeToRefs让它变成响应数据
  
5选择入住时间
  1.完成静态页面搭建
  2.根据当前时间，动态展示第一次进入展示的入住时间
    2.1.安装第三方库：dayjs， 安装 npm install dayjs
        .把获取当前时间的函数封装到utils中
        .调用函数获取当前值和后一天的值，在template中使用
  3.选择时间
  .通过Vant UI组件库完成
  .返回的时间用封装好的时间处理函数处理，并更新

    3.1.使用dayjs组件库处理当前时间和后一天时间，并通过dayjs封装的另一个计算时间差函数得到时间差
    3.2在选择时间后调用的函数中使用计算时间差函数，计算有几晚

6.静态的价格描述，位置/民宿名等

7.热门推荐
  注意：尽量不要再小的组件里面发送网络请求
    .因为如果要找起来很麻烦
    .大组件发送网络请求，小组件需要数据再传进去
  7.1.再home里面发送 热门建议的网络请求
  7.2.把数据传递到子组件里面
    .在子组件中定义Props
    .父组件传递值
  7.3.home页面发送网络请求不推荐，因为网络请求多了，整个页面就有很多网络请求和数据处理逻辑。
      .把网络请求抽取放到service文件夹中对应的模块中。
        .home页面值管拿数据， --->  pinia的store负责发送网络请求。--->  service文件的模块复杂管理发送网络请求的地址.
        .形成分层架构
      .在pinia中发送请求拿到数据，那子组件需要数据就可以直接拿store的数据，不需要从父组件传过去

      .在home页面通过store发送网络请求，子组件需要数据，在通过store拿到数据

      具体操作：
      service
        1.在service文件的module文件夹下创建home.js,来写发送网络请求的函数
          .导入封装好的axios
          .导出函数，函数返回网络请求代码。
        2.在service文件下的index.js中导出各种模块
      pinia 
        1.给需要网络请求的根页面（如首页，关于，我的），创建对应的 store 
        2.定义一个state值，存储网络请求数据，
        3.导入service文件导出的网络请求，通过解构赋值拿到想要的请求函数
        4.通过actions，发送网络请求，并保存到state，使用async-await 返回一个promise。
      home页面 
        1.拿到home页面store的构造函数，通过store发送网络请求。
      home子页面
        1.想要使用数据通过store拿到保存后的数据

      优点
      可以将每一层的操作放到不同的位置，就不需要把使用逻辑放到一个组件中，随着业务了解越来越多，会越来越复杂的
      所以做这样的分层架构

8.点击定位获取当前位置经纬度后的处理结果
  1.获取成功后，传给服务器，让公司的服务器查询经纬度对应的城市信息，吧城市信息返回给你，就可以使用啦
  2.有一些服务器专门查询经纬度的，在网上找对应的API
  3.将经纬度发给类似百度，高德这样的服务器，他们都有提高API


  九.搜索页面
    1.点击搜索，进入到搜索页面，在搜索页面完成相关操作，
      .在页面跳转之前要先有页面，然后配置好路由，再完成跳转。
      1.创建搜索视图文件夹search
      2.配置好路由
    2.跳转搜索页面全屏。
      1.通过是否显示，（路由meta属性配置布尔值）
      2.通过css

  十.分类
    1.分类在搜索下面，发送请求分类数据。在home的store中请求。
    2.在sevice文件的modules的home中写网络请求的代码
    3.创建分类组件home-categories
    4.在home页面发送网络请求。
    5.在home-categories页面处理数据

  十一.推荐
  1.创建home-content.vue 页面
  2.在home页面导入热门推荐组件
  3.在store里面写热门推荐网络请求代码
    .服务器返回数据不可能一次性返回很多数据，很多数据都是使用分页展示的。
    .分页传参数一般有两种形式
      第一：传入page （第几页数据）

      第二：传入两个数据：size （多少条数据），offset （偏移的数量）
        .比如第一次拿数据拿的是数据库0-29条数据，  这时 size:30, offset:0
        .上面三十条数据展示完后需要展示后面三十条数据，  这时 size:30, offset:30
          .前面30条已经展示了，要从后面30条开始请求30条
        .在请求后30条数据，这时 size:30, offset:60
  
  4.在service中的home中写热门推荐网络请求代码
    .传参，page （第几页数据）不能写死,是传进去的
  5.在home页面请求热门推荐数据
  6.多页数据如何请求
    1.先完成点击按钮请求第一页数据，再次点击请求下一页数
    2.在store中数据应该是添加,而不是替换
    
  7.在state中写热门推荐分页请求也是数据

  8.在推荐组件中展示请求的数据
    8.1.从store中拿到数据
    8.2.有两种展示的状态，需要封装两个组件
    8.3.判断类型（展示的状态）
    8.4.封装这两种状态的组件，这组件其他地方也会使用所以封装到components  
      .house-item-v9
      .house-item-v3
    8.5.传入对应的数据给不同的状态

  9.监听：什么时候页面滚动到了底部？
    .页面为什么会发送滚动
    1.window窗口
    2.元素：overflow-y:auto

      .元素设置overflow-y 后就不能使用window.addEventListener 进行监听滚动
        因为滚动的是元素不是window
    3.通过window进行滚动，对window进行监听滚动
    4.通过元素滚动，需要对元素进行监听

    5.通过window进行监听时需要移除监听，不然其他页面也会进行监听
    6.  // 监听window创建的滚动
  // 1.当我们离开页面时，我们移除监听
  // 2.如果别的页面也进行监听，会编写重复的代码
  // 3.抽取这部分逻辑放到hooks中

  10.搜索框
    1.默认是隐藏
    2.滚动到移动位置显示

    3.之前封装监听滚动的hooks可以知道现在滚动到什么位置
    4.使用watch进行监听

    5.在components中创建搜索框组件

  11.搜索框显示的时间是之前选择的时间，且很多地方会用到。
    .把很多地方都会用到的数据放到mainStore中，方便其他页面使用

  回顾：
    一.细节知识点
    1.1.line-height默认1.1

    1.2.window10中chrome定位

    二.首页的搭建
    2.1.搜索按钮的点击
      .搜索搭建
      .点击跳转到搜索页

    2.2.类别的数据展示
      .请求类别数据
        .homeStore
          .state
          .actions 
      .展示数据
        .水平滚动
          .overflow-x：auto
          .::-webkit-sctollbar{display:none}
      
    2.3.列表数据展示
      2.3.1.请求第一页数据 
        .请求房屋列表的数据
          .homeStore
            .houselist[]
            .actions
          .this.houselist.push(...resizeBy.data)
      2.3.2.点击加载更多
        .保存currenPage
          .homeStore
            .currentPage
            .currentPage++
      
      2.3.3.不同类型展示数据
        .home-item-v9
        .home-item-v3

    三.首页处理
    3.1.数据展示的undefined
      .?. 
      .v-if
    3.2.useScroll
      3.2.1.isReachBottom
      3.2.2.scrollTop
        .ref->watch
        .computed 
    
      3.2.3.节流的处理
        .underscore
          .throttle
          .另一个选择，先不处理
    3.3.Tabbar不选中问题

    3.4.SearchBar封装和展示

    3.5.开始和结束时间共享
      .mainStore
        .starDate
        .endDate
    

  作业：
    一.如何监听页面滚动？上拉加载更多，显示搜索框
      .hooks封装 useScroll
    
    二.如何监控整个应用进行网络请求，并且显示动画界面？

    三？隐藏底部tabBar有什么方式

    四.页面跳转如何进行数据的传递
    .搜索页面跳转：query
    .跳转想去页：动态路由 /derall/:id

    
            


      




























      回顾
      一：城市页面的搭建
        1.1.定位的API问题

        2.2.城市页面的跳转

        2.3.城市的页面搭建
          2.3.1.顶部的搜索框的搭建
          2.3.2.Tab的切换组件
          2.3.3.获取城市的数据
            .分层架构
          2.3.4.城市数据的展示
            .indexBar （vant ui）
            .两层for循环
          2.3.5.热门数据的展示
          

        2.4点击选中某个城市
          .城市数据的保存
          .回显的效果

      三.首页继续搭建
      3.1.日期选择功能

      3.2.热门建议数据的展示
        .分层架构
    
    作业
    一·如何去修改UI组件库的样式？有哪些方式，各有什么优势？

    二。一个页面的数据请求和管理有哪些方式？各有什么特点？
      方式一：保存在页面中
      方式二：保存在store中
    
    三.隐藏底部tabbar有什么方式

    四。页面跳转如何进行数据的传递？