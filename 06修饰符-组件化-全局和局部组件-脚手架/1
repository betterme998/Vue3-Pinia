# 1.Vue组件化开发思想
  1.人处理问题的方式
    .任何一个人处理信息的逻辑能力都是有限的
    .所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容
    .但是，我们有一种天生的能力，就是将问题进行拆解
    .如果将一个复杂的问题，才分成很多个可以处理的小问题，再将其放到整体当中，你会发现大的问题也会迎刃而解

  2.认识组件化开发
    .组件化也是类似的思想
      *如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展

      *但如果，我们将一个页面拆分成一个一个小的功能块，每个功能块完全属于自己这部分独立功能，那么之后整个页面管理和
      维护就变得非常容易了

      *如果我们将一个个功能块拆分后，就可以像搭建积木一样来搭建我们的项目

    .我们需要通过组件化的思路来思考整个应用程序
      1.我们将一个完整的页面分成很多个组件
      2.每个组件又可以进行细分
      3.而组件本身又可以在多个地方进行复用
  
  3.Vue的组件化
    组件化是Vue，React，Angular的核心思想，也是我们后续的重点
      .前面我们的createApp函数传入了一个对象app，这个对象其实本质上就是一个组件，也是我们应用程序的根组件；
      .组件化提供了一种抽象，让我们可以开发一个个独立可复用的小组件来构造我们的应用；
      .任何的应用都会被抽象成一颗组件树

# 2.注册Vue的全局组件
  1.注册组件的方式
    .如果我们现在有一部分内容（模板，逻辑），我们希望将这部分内容抽取到一个独立的组件中去维护，这个时候如何注册一个组件呢？
    .注册组件分两种：
      1.全局组件：在任何其他的组件中都可以使用的组件；
      2.局部组件：只有在注册的组件中才能使用的组件；
  
  2.注册全局组件
    .学习全局组件注册
      1.全局组件需要使用我们全局创建的app来注册组件；
      2.通过component方法传入组件名，组件对象即可注册一个全局组件了
      3.之后，我们可以在app组件的template中直接使用这个全局组件
    .全局组件的逻辑
      1.比如自己的data，computed，methods等等

    .组件的名称
      1.在通过app.component注册一个组件的时候，第一个参数是组件的名称，定义组件名的方式有两种：
        .方式一：使用bebab-case（短横线分隔符）
          当使用短横线分隔符定义一个组件时，你也必须在引用这个自定义元素时使用。（就是用去的名字来引用组件）
        .方式二：使用PasclCase（驼峰标识符）
          但是html当中不区分大小写，这样在html中不行，但在vue的template中可以这样写
        （推荐使用短横线分隔符写）

  3.注册局部组件
    .全局组件往往是在应用程序一开始就会注册完成，那么意味着某些组件我们并没有用到，也会一起被注册；
      .比如我们注册三个全局组件：ComponentA，ComponentB,ComponentC
      .在开发中我们发现只使用了ComponentA，ComponentB，如果ComponentC没有用到但是我们依然会在全局进行注册，那么意味着类似于
      webpack这种打包工具在打包我们项目时，我们依然会对其进行打包
      .这样最终打包出的JavaScript包会有关于ComponentC的内容，用户在下载对应的JavaScript时也会增加包大小
    .所以在开发中我们通常使用组件的时候采用的都是局部注册：
      .局部注册是在我们需要使用到的组件中，通过components属性来进行注册；
      .比如之前的App组件中，我们有data，computed,methods等选项了，事实上还可以有一个components选项；
      .该components选项对应的是一个对象，对象中的键值对是组件的名称，组件对象



# 3.注册Vue的布局组件

# 4.Vue的开发模式解析

# 5.Vue CLI安装和使用

# 6.Vue得项目目录分析